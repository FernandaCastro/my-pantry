server:
  port: 8081
spring:
  application:
    name: purchase-service
  datasource:
    platform: postgres
    url: ${PURCHASE_DB_URL}
    username: ${PURCHASE_DB_USERNAME}
    password: ${PURCHASE_DB_PASSWORD}
    schema: purchase
    hikari:
      minimum-idle: ${PURCHASE_DB_IDLE_CONN}
      maximum-pool-size: ${PURCHASE_DB_MAX_POOL_SIZE}
  jpa:
    hibernate:
      ddl-auto: none
      defer-datasource-initialization: false
    properties:
      hibernate:
        dialect: org.hibernate.dialect.PostgreSQLDialect
        format_sql: true
  sql:
    init:
      mode: always
  flyway:
    baselineOnMigrate: ${PURCHASE_SCHEMA_EXISTS} #Needed when schema is not empty
    baselineVersion: 0
    encoding: ISO-8859-1
    defaultSchema: purchase
kafka-config:
  bootstrap-servers-config: ${KAFKA_SERVER}
  purchase-create-topic: purchaseCreateTopic
  purchase-complete-topic: purchaseCompleteTopic
  product-topic: productTopic
  group: pantryGroup
  partitions: ${PARTITIONS}
  replicas: ${REPLICAS}
security-config:
  secret: ${SECURITY_SECRET}
  allowedOrigin: ${ALLOWED_ORIGINS}
  googleClientId: ${GOOGLE_CLIENT_ID}
  googleClientSecret: ${GOOGLE_CLIENT_SECRET}
  authzServer: ${AUTHZ_SERVER}
management:
  endpoints:
    web:
      exposure:
        include: ${ACTUATOR_WEB_EXPOSURE}
logging:
  level:
    root: ${ROOT_LOG_LEVEL}
    org.hibernate.SQL: ${HIBERNATE_LOG_LEVEL}
    org.springframework.web: ${WEB_LOG_LEVEL}
    org.springframework.security: ${SECURITY_LOG_LEVEL}